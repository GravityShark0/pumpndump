// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input { //{{{
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
        }
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    mouse {
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // focus-follows-mouse
} //}}}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
// output "HDMI-A-1" {
// }
output "eDP-1" { //{{{
    // Uncomment this line to disable this output.
    off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    // mode "1920x1080@120.030"

    // Scale is a floating-point number, but at the moment only integer values work.
    //scale 1
    //
    // Transf// orm allows to rotate the output counter-clockwise, valid values are:
    // normal// , 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    //transform "90"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=-1440 y=516
} //}}}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout { //{{{
    // Set gaps around windows in logical pixels.
    gaps 16

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "on-overflow"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    default-column-width { proportion 0.5; }

    // You can change how the focus ring looks.
    focus-ring {
        width 4
        // Color of the ring on the active monitor.
        active-color "#ddb7f2"

        // Color of the ring on inactive monitors.
        inactive-color "#ddb7f2"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        //
        // active-gradient from="#80c8ff" to="#bbddff" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }
    struts {
        left 64
        right 64
        // top 64
        // bottom 64
    }
} //}}}

spawn-at-startup "wl-paste" "--watch" "cliphist" "store"
// spawn-at-startup "~/.wprofile"

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot %Y-%m-%d %H-%M-%S.png"

// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
/- animations {
    // slowdown 3.0
}

// Window rules let you adjust behavior for individual windows.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules
window-rule { //{{{
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    // match app-id=r#"^org\.wezfurlong\.wezterm$"#
    draw-border-with-background false
    geometry-corner-radius 6 6 0 0
}

window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id="Alacritty"
    geometry-corner-radius 0 0 0 0
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
} //}}}

binds { //{{{
    // Mod-Shift-/, which is usually the same as Mod-?,
    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.
    Mod+T { spawn "alacritty"; }
    Mod+Shift+T { spawn "alacritty jo"; }
    Mod+W { spawn "launcher"; }
    Super+Alt+Shift+Control+L { spawn "swaylock"; }
    Mod+B { spawn "brave"; }

    // You can also use a shell:
    // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume  allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume  allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute         allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute      allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86MonBrightnessUp   allow-when-locked=true { spawn "monitorlight" "+10"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "monitorlight" "+-10"; }

    Mod+C { close-window; }

    // Mod+Left  { focus-column-left; }
    // Mod+Down  { focus-window-down; }
    // Mod+Up    { focus-window-up; }
    // Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    // Mod+Ctrl+Left  { move-column-left; }
    // Mod+Ctrl+Down  { move-window-down; }
    // Mod+Ctrl+Up    { move-window-up; }
    // Mod+Ctrl+Right { move-column-right; }
    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }

    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }
    Mod+Alt+H     { focus-monitor-left; }
    Mod+Alt+J     { focus-monitor-down; }
    Mod+Alt+K     { focus-monitor-up; }
    Mod+Alt+L     { focus-monitor-right; }

    // Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Alt+H     { move-column-to-monitor-left; }
    Mod+Shift+Alt+J     { move-column-to-monitor-down; }
    Mod+Shift+Alt+K     { move-column-to-monitor-up; }
    Mod+Shift+Alt+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    // Mod+Page_Down      { focus-workspace-down; }
    // Mod+Page_Up        { focus-workspace-up; }
    // Mod+Period            { focus-workspace-down; }
    // Mod+Comma             { focus-workspace-up; }

    Mod+Comma { spawn "~/.config/waybar/scripts/workspaces.sh" "up"; }
    Mod+Period { spawn "~/.config/waybar/scripts/workspaces.sh" "down"; }
    // Mod+Shift+Page_Down { move-column-to-workspace-down; }
    // Mod+Shift+Page_Up   { move-column-to-workspace-up; }
    Mod+Shift+Period      { move-column-to-workspace-down; }
    Mod+Shift+Comma       { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    //Mod+Ctrl+Page_Down { move-workspace-down; }
    //Mod+Ctrl+Page_Up   { move-workspace-up; }
    Mod+Ctrl+Period      { move-workspace-down; }
    Mod+Ctrl+Comma       { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    // Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    // Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    // Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    // Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    // Mod+WheelScrollRight      { focus-column-right; }
    // Mod+WheelScrollLeft       { focus-column-left; }
    // Mod+Ctrl+WheelScrollRight { move-column-right; }
    // Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    // Mod+Shift+WheelScrollDown      { focus-column-right; }
    // Mod+Shift+WheelScrollUp        { focus-column-left; }
    // Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    // Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    Mod+TouchpadScrollDown { spawn "monitorlight" "+2"; }
    Mod+TouchpadScrollUp { spawn "monitorlight" "+-2"; }
    Mod+TouchpadScrollLeft { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    Mod+TouchpadScrollRight   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // Workspaces
    Mod+1 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "1"; }
    Mod+2 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "2"; }
    Mod+3 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "3"; }
    Mod+4 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "4"; }
    Mod+5 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "5"; }
    Mod+6 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "6"; }
    Mod+7 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "7"; }
    Mod+8 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "8"; }
    Mod+9 { spawn "~/.config/waybar/scripts/workspaces.sh" "focus-workspace" "9"; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Consume and Expel commands
    Mod+I  { consume-window-into-column; }
    Mod+O { expel-window-from-column; }
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Column modifications
    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+M { center-column; }

    // Finer width adjustments.
    Mod+Ctrl+H { set-column-width "-10%"; }
    Mod+Ctrl+J { set-window-height "+10%"; }
    Mod+Ctrl+K { set-window-height "-10%"; }
    Mod+Ctrl+L { set-column-width "+10%"; }

    // Screenshotting
    Mod+S { screenshot; }
    Mod+Shift+S { screenshot-window; }
    Mod+Ctrl+S { screenshot-screen; }
    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Quit
    Mod+Shift+E { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
} //}}}
